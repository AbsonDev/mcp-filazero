// Teste de configura√ß√£o para staging
// Simula exatamente as vari√°veis de ambiente do MCP config fornecido

// Configurar vari√°veis de ambiente ANTES de importar m√≥dulos
process.env.NODE_ENV = 'staging';
process.env.FILAZERO_API_URL = 'https://api.staging.filazero.net/';
process.env.LOG_LEVEL = 'debug';

const config = require('./dist/config/environment').config;
const PROVIDERS = require('./dist/config/environment').PROVIDERS;
const RECAPTCHA_CONFIG = require('./dist/config/environment').RECAPTCHA_CONFIG;

async function testStagingConfig() {
  console.log('üß™ TESTE DE CONFIGURA√á√ÉO STAGING');
  console.log('=' .repeat(50));

  // 1. Testar configura√ß√µes b√°sicas
  console.log('üìã Configura√ß√µes carregadas:');
  console.log('- Environment:', config.environment);
  console.log('- API URL:', config.apiUrl);
  console.log('- Log Level:', config.logLevel);
  console.log('- Port:', config.port);

  // 2. Validar se est√° usando configura√ß√µes corretas
  const expectedApiUrl = 'https://api.staging.filazero.net/';
  if (config.apiUrl === expectedApiUrl) {
    console.log('‚úÖ API URL correta para staging');
  } else {
    console.log('‚ùå API URL incorreta. Esperado:', expectedApiUrl, 'Atual:', config.apiUrl);
  }

  // 3. Testar providers para staging
  console.log('\nüìã Providers para staging:');
  console.log('- Artesano:', PROVIDERS.artesano);
  console.log('- Botic√°rio:', PROVIDERS.boticario);
  console.log('- Nike:', PROVIDERS.nike);
  console.log('- Phone Noel:', PROVIDERS.phoneNoel);
  console.log('- Queue Noel:', PROVIDERS.queueNoel);

  // Validar se est√° usando IDs de desenvolvimento
  if (PROVIDERS.artesano === 460) {
    console.log('‚úÖ Providers configurados para ambiente n√£o-produ√ß√£o');
  } else {
    console.log('‚ö†Ô∏è Usando providers de produ√ß√£o. Esperado para staging: IDs de desenvolvimento');
  }

  // 4. Testar configura√ß√£o reCAPTCHA
  console.log('\nüìã Configura√ß√£o reCAPTCHA:');
  console.log('- Bypass habilitado:', RECAPTCHA_CONFIG.bypassValidation);
  console.log('- Use production service:', RECAPTCHA_CONFIG.useProductionService);

  if (RECAPTCHA_CONFIG.bypassValidation) {
    console.log('‚úÖ Bypass reCAPTCHA habilitado para staging');
  } else {
    console.log('‚ùå Bypass reCAPTCHA deveria estar habilitado em staging');
  }

  // 5. Testar gera√ß√£o de token bypass
  console.log('\nüîê Testando gera√ß√£o de token bypass...');
  try {
    const { recaptchaBypassService } = require('./dist/services/recaptcha-bypass.service');
    
    const token = await recaptchaBypassService.generateBypassToken('create_ticket', 'mcp-staging-test');
    console.log('‚úÖ Token bypass gerado:', token.slice(0, 30) + '...');
    console.log('- Tamanho:', token.length);
    console.log('- Formato v√°lido:', token.startsWith('BYPASS_V3_') && token.endsWith('_MCP') ? '‚úÖ' : '‚ùå');

    // Validar token gerado
    const isValid = recaptchaBypassService.isValidBypassToken(token);
    console.log('- Token v√°lido:', isValid ? '‚úÖ' : '‚ùå');

  } catch (error) {
    console.log('‚ùå Erro ao gerar token bypass:', error.message);
  }

  // 6. Testar integra√ß√£o com recaptcha service
  console.log('\nüß™ Testando integra√ß√£o reCAPTCHA service...');
  try {
    const { recaptchaService } = require('./dist/services/recaptcha.service');
    
    const token = await recaptchaService.generateToken('test_staging');
    console.log('‚úÖ Token gerado pelo recaptcha service:', token.slice(0, 30) + '...');
    
    if (token.startsWith('BYPASS_V3_')) {
      console.log('‚úÖ reCAPTCHA service est√° usando bypass em staging');
    } else {
      console.log('‚ö†Ô∏è reCAPTCHA service n√£o est√° usando bypass');
    }

  } catch (error) {
    console.log('‚ùå Erro no recaptcha service:', error.message);
  }

  // 7. Resumo final
  console.log('\n' + '='.repeat(50));
  console.log('üìä RESUMO STAGING:');
  console.log('‚úÖ Configura√ß√£o din√¢mica:', config.environment === 'staging' ? 'OK' : 'FALHOU');
  console.log('‚úÖ API URL correta:', config.apiUrl === expectedApiUrl ? 'OK' : 'FALHOU');
  console.log('‚úÖ Bypass habilitado:', RECAPTCHA_CONFIG.bypassValidation ? 'OK' : 'FALHOU');
  console.log('‚úÖ Providers staging:', PROVIDERS.artesano === 460 ? 'OK' : 'PRODU√á√ÉO');

  console.log('\nüéØ CONFIGURA√á√ÉO PRONTA PARA MCP STAGING!');
  
  // 8. Mostrar comando MCP
  console.log('\nüìã Comando para testar:');
  console.log('SET NODE_ENV=staging');
  console.log('SET FILAZERO_API_URL=https://api.staging.filazero.net/');
  console.log('SET LOG_LEVEL=debug');
  console.log('node dist/index.js');
}

// Executar teste
testStagingConfig()
  .then(() => {
    console.log('\n‚úÖ Teste de configura√ß√£o conclu√≠do!');
    process.exit(0);
  })
  .catch((error) => {
    console.error('\n‚ùå Erro no teste:', error);
    process.exit(1);
  });