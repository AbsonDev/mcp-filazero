# Script de teste para validar o ambiente de produ√ß√£o
# Execu√ß√£o: .\scripts\test-production.ps1

Write-Host "üß™ Testando Filazero MCP Server em Produ√ß√£o..." -ForegroundColor Cyan
Write-Host ""

# Fun√ß√£o para testar URL
function Test-Url {
    param([string]$Url, [string]$Description)
    
    try {
        $response = Invoke-RestMethod -Uri $Url -TimeoutSec 10
        Write-Host "‚úÖ $Description - OK" -ForegroundColor Green
        return $true
    } catch {
        Write-Host "‚ùå $Description - FALHA: $($_.Exception.Message)" -ForegroundColor Red
        return $false
    }
}

# Fun√ß√£o para verificar processo
function Test-Process {
    param([string]$ProcessName)
    
    $processes = Get-Process -Name $ProcessName -ErrorAction SilentlyContinue
    if ($processes) {
        Write-Host "‚úÖ Processo $ProcessName rodando (PID: $($processes[0].Id))" -ForegroundColor Green
        return $true
    } else {
        Write-Host "‚ùå Processo $ProcessName n√£o encontrado" -ForegroundColor Red
        return $false
    }
}

# Fun√ß√£o para verificar porta
function Test-Port {
    param([int]$Port)
    
    try {
        $connection = Test-NetConnection -ComputerName localhost -Port $Port -WarningAction SilentlyContinue
        if ($connection.TcpTestSucceeded) {
            Write-Host "‚úÖ Porta $Port est√° aberta" -ForegroundColor Green
            return $true
        } else {
            Write-Host "‚ùå Porta $Port est√° fechada" -ForegroundColor Red
            return $false
        }
    } catch {
        Write-Host "‚ùå Erro ao testar porta $Port" -ForegroundColor Red
        return $false
    }
}

$allTestsPassed = $true

Write-Host "1. üîç Verificando arquivos essenciais..." -ForegroundColor Yellow

# Verificar arquivos
$files = @(
    "package.json",
    "dist/index.js",
    "ecosystem.config.js"
)

foreach ($file in $files) {
    if (Test-Path $file) {
        Write-Host "  ‚úÖ $file existe" -ForegroundColor Green
    } else {
        Write-Host "  ‚ùå $file n√£o encontrado" -ForegroundColor Red
        $allTestsPassed = $false
    }
}

Write-Host ""
Write-Host "2. üñ•Ô∏è Verificando processos Node.js..." -ForegroundColor Yellow

if (-not (Test-Process "node")) {
    Write-Host "  ‚ö†Ô∏è Nenhum processo Node.js detectado. Servidor pode n√£o estar rodando." -ForegroundColor Yellow
}

Write-Host ""
Write-Host "3. üåê Testando conectividade..." -ForegroundColor Yellow

# Testar APIs externas
$apiTests = @(
    @{ Url = "https://api.staging.filazero.net/"; Description = "API Filazero Produ√ß√£o" },
    @{ Url = "https://api.dev.filazero.net/"; Description = "API Filazero Desenvolvimento" }
)

foreach ($test in $apiTests) {
    if (-not (Test-Url $test.Url $test.Description)) {
        $allTestsPassed = $false
    }
}

Write-Host ""
Write-Host "4. üè• Testando Health Check..." -ForegroundColor Yellow

# Aguardar um pouco para o servidor inicializar
Start-Sleep -Seconds 2

if (Test-Port 3001) {
    if (Test-Url "http://localhost:3001/health" "Health Check Endpoint") {
        Write-Host "  üìä Health check funcionando!" -ForegroundColor Green
    } else {
        Write-Host "  ‚ö†Ô∏è Health check endpoint n√£o responde" -ForegroundColor Yellow
    }
} else {
    Write-Host "  ‚ö†Ô∏è Health check n√£o habilitado ou porta 3001 n√£o est√° aberta" -ForegroundColor Yellow
}

Write-Host ""
Write-Host "5. üìã Resumo dos Testes" -ForegroundColor Cyan
Write-Host "----------------------------------------" -ForegroundColor Gray

if ($allTestsPassed) {
    Write-Host "üéâ TODOS OS TESTES PASSARAM!" -ForegroundColor Green
    Write-Host ""
    Write-Host "‚úÖ Servidor est√° pronto para produ√ß√£o!" -ForegroundColor Green
    Write-Host ""
    Write-Host "üìù Pr√≥ximos passos:" -ForegroundColor White
    Write-Host "   1. Configure o servidor no Claude Desktop" -ForegroundColor Gray
    Write-Host "   2. Teste algumas tools MCP" -ForegroundColor Gray
    Write-Host "   3. Configure monitoramento se necess√°rio" -ForegroundColor Gray
    Write-Host "   4. Configure backup autom√°tico" -ForegroundColor Gray
} else {
    Write-Host "‚ö†Ô∏è ALGUNS TESTES FALHARAM" -ForegroundColor Yellow
    Write-Host ""
    Write-Host "üîß Verifique os itens marcados com ‚ùå e corrija antes de usar em produ√ß√£o." -ForegroundColor Yellow
}

Write-Host ""
Write-Host "üìö Para mais informa√ß√µes, consulte:" -ForegroundColor Cyan
Write-Host "   - DEPLOY_PRODUCAO.md (guia completo)" -ForegroundColor Gray
Write-Host "   - QUICK_START_PRODUCTION.md (guia r√°pido)" -ForegroundColor Gray
Write-Host "   - README.md (documenta√ß√£o geral)" -ForegroundColor Gray
